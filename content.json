[{"title":"googel-guava-生产问题","date":"2017-06-21T09:13:07.000Z","path":"2017/06/21/google-guava/googel-guava-生产问题/","text":"Google Guava实际开发遇到的问题总结 Guava Lists.transform dubbo请求序列化问题问题引发今天遇到一个问题，大概是这样的：使用了guava的Lists.transform对一个ArrayList进行转化后，做一个dubbo的请求参数，发生异常。但是使用原生态的ArrayList是没问题的。 在实际工作中我们经常对一个List集合进行转化，常用的就是for循环和forEach。google Guava提供的 transform可以做到更优雅。看例子：1234567891011121314151617181920212223242526272829303132333435363738394041424344//TODO 批量缓存圈子信息private Map&lt;String,String&gt; cacheGomeShopGroupItem(List&lt;GomeStoreItem&gt; gomeStoreItems)&#123; final Map&lt;String,String&gt; shopGroupMap = Maps.newHashMap(); //1、普通for循环 List&lt;String&gt; storeIds = Lists.newArrayList(); for (int i = 0; i &lt;gomeStoreItems.size()&amp;&amp;gomeStoreItems!=null ; i++) &#123; GomeStoreItem gomeStoreItem = gomeStoreItems.get(i); String storeId = null; if (gomeStoreItem != null)&#123; storeId = gomeStoreItem.getGomeStoreId(); &#125; storeIds.add(storeId); &#125; //2、使用transform转化 List&lt;String&gt; storeIds1 = Lists.newArrayList(); storeIds1.addAll(Lists.transform(gomeStoreItems, new Function&lt;GomeStoreItem, String&gt;() &#123; @Nullable @Override public String apply(@Nullable GomeStoreItem gomeStoreItem) &#123; return gomeStoreItem.getGomeStoreId(); &#125; &#125;)); List&lt;GomeShopGroupItem&gt; shopGroupItems = Lists.newArrayList(); try &#123; //正常的dubbo调用 CommonResultEntity&lt;List&lt;ShopGroupInfo&gt;&gt; resuletEntity = opensocialGroupFacade.shopGroupInfo(storeIds); //非正常的dubbo调用 CommonResultEntity&lt;List&lt;ShopGroupInfo&gt;&gt; resuletEntity1 = opensocialGroupFacade.shopGroupInfo(storeIds1); // 业务代码 ...... &#125; catch (Exception e) &#123; logger.error(String.format(\"查询圈子出错：storeIds：%s\",JSON.toJSONString(storeIds))); &#125; return shopGroupMap; &#125; 问题分析以下是使用transform转化的List,使用dubbo调用发生的异常信息： 12Failed to invoke the method shopGroupInfo in the service cn.com.mx.opensocial.group.service.IOpensocialGroupFacade. Tried 3 times of the providers [10.125.198.49:30006] (1/1) from the registry 10.125.198.74:2181 on the consumer 10.144.36.140 using the dubbo version 2.5.5.cat-SNAPSHOT. Last error is: Failed to invoke remote method: shopGroupInfo, provider: dubbo://10.125.198.49:30006/cn.com.mx.opensocial.group.service.IOpensocialGroupFacade?anyhost=true&amp;application=gome-detail-service&amp;check=false&amp;default.accepts=1000&amp;default.check=false&amp;default.timeout=5000&amp;dubbo=2.5.3&amp;heartbeat=100000&amp;interface=cn.com.mx.opensocial.group.service.IOpensocialGroupFacade&amp;methods=shopGroupInfo,strollGroups,checkIsMember&amp;owner=qiantai&amp;pid=4876&amp;providerside=venus-opensocial&amp;revision=1.1&amp;serialization=nativejava&amp;side=consumer&amp;timeout=8000&amp;timestamp=1498030003360&amp;version=1.0.0, cause: Failed to send message Request [id=12, version=2.0.0, twoway=true, event=false, broken=false, data=RpcInvocation [methodName=shopGroupInfo, parameterTypes=[interface java.util.List], arguments=[[1, 6, 10, 20, 30, 31, 40, 10122, 10132, 10138, 10140, 10142, 10145, 10146, 10150, 10159]], attachments=&#123;_catChildMessageId=gome-detail-service-0a90248c-416119-487610019, _catParentMessageId=gome-detail-service-0a90248c-416119-487610018, _rStrategy=null, path=cn.com.mx.opensocial.group.service.IOpensocialGroupFacade, consumerside=gome-detail-service, interface=cn.com.mx.opensocial.group.service.IOpensocialGroupFacade, _catRootMessageId=gome-detail-service-0a90248c-416119-487610018, @null=null, timeout=8000, version=1.0.0&#125;]] to /10.125.198.49:30006, cause: com.gome.item.services.GomeStoreServiceImpl$2 cause: Failed to send message 可以看出发送请求的时候就失败了。那么第一考虑到的就是序列化，因为一次rpc调用肯定需要将参数序列化。 1、ArrayList 实现了 java.io.Serializable接口；2、使用transform生成的TransformingRandomAccessList 并不是ArrayList类型并没有实现序列化接口， 带着问题去查看guava源码：123456789101112/** * Returns a list that applies &#123;@code function&#125; to each element of &#123;@code * fromList&#125;. The returned list is a transformed view of &#123;@code fromList&#125;; * changes to &#123;@code fromList&#125; will be reflected in the returned list and vice * versa. * * &lt;p&gt;Since functions are not reversible, the transform is one-way and new * items cannot be stored in the returned list. The &#123;@code add&#125;, * &#123;@code addAll&#125; and &#123;@code set&#125; methods are unsupported in the returned * list. ........ */ 大概意思：123456/** * 该方法返回一个列表，这个列表中元素是运用方法中传入的功能函数(Function)对原列表中的元素进行处理后的结果, * 它是原列表的一个功能视图，任何对原列表的改变将会体现到视图列表中。因为Function函数是不可逆的， * 所以这样的转换是单向的，并且转换的结果不能存储在返回的列表中。 * 所有对视图列表的添加（add/addAll）、设置（set）等都是不被支持的。 */ 所以说，返回的对象列表是一个视图，其中对它的任何更改都是无效的，并且也不建议对视图对象产生更改，如果需要更改返回的列表，那么需要自己进一步包装，如Lists.newArrayList(retList);如果需要对返回的结果视图进行处理：12List&lt;String&gt; storeIdsArrayList = Lists.newArrayList(storeIds); 这样就可以正常的去做为一个rpc请求的参数了。","tags":[{"name":"Framework","slug":"Framework","permalink":"//star45.me/tags/Framework/"},{"name":"Guava","slug":"Guava","permalink":"//star45.me/tags/Guava/"}]},{"title":"google-guava-functional","date":"2017-04-19T09:18:21.000Z","path":"2017/04/19/google-guava/google-guava4-functional/","text":"Google Guava学习 google-guava-functional 我们为什么要用google-guava-functional google-guava-functional 会给我们带来什么 我们带着这些问题，去认识、学习google-guava-functional","tags":[{"name":"Framework","slug":"Framework","permalink":"//star45.me/tags/Framework/"},{"name":"Guava","slug":"Guava","permalink":"//star45.me/tags/Guava/"}]},{"title":"google-guava-caches","date":"2017-04-19T09:18:00.000Z","path":"2017/04/19/google-guava/google-guava3-caches/","text":"Google Guava学习 google-guava-caches 我们为什么要用google-guava-caches google-guava-caches会给我们带来什么 我们带着这些问题，去认识、学习google-guava-caches","tags":[{"name":"Framework","slug":"Framework","permalink":"//star45.me/tags/Framework/"},{"name":"Guava","slug":"Guava","permalink":"//star45.me/tags/Guava/"}]},{"title":"google-guava-collections","date":"2017-04-19T09:17:35.000Z","path":"2017/04/19/google-guava/google-guava2-collections/","text":"GoogleGuava学习 google-guava-collections是什么 我们为什么要用google-guava-collections google-guava-collections会给我们带来什么 我们带着这些问题，去认识、学习google-guava-collections 使用Guava里的Collections，你将受益不菲。它能大量减少你工程里那些样本式的代码 (同时你还能使用它提供的新的速度更快的数据结构！). Google Collection 实现实际开发应用 题外话：前几天开发一个功能的时候，需要一个复杂的数据接口。一个Map里面key-value结构，value的值是使用List。还需要排序、遍历检索等操作，虽然在机器中的运算是比较快的，但是整体的代码比较臃肿。这时候在review同事的代码中发现一个优秀的类库google-guava中的collection。一旦上手发现太爽了。 123456Multimap&lt;Integer, WarrantyBean&gt; warrantyMultimap = ArrayListMultimap.create();for (WarrantyBean warrantyBean : result)&#123; Integer typeKey = warrantyBean.getProductWarrantyType(); warrantyMultimap.put(typeKey,warrantyBean);&#125;Map&lt;Integer,Collection&lt;WarrantyBean&gt;&gt; warrantyMap = warrantyMultimap.asMap(); 这样可以在一次for循环中得到一个Map","tags":[{"name":"Framework","slug":"Framework","permalink":"//star45.me/tags/Framework/"},{"name":"Guava","slug":"Guava","permalink":"//star45.me/tags/Guava/"}]},{"title":"google-guava1-basic","date":"2017-04-19T09:13:07.000Z","path":"2017/04/19/google-guava/google-guava1-basic/","text":"Google Guava学习 google-guava 我们为什么要用google-guava google-guava 会给我们带来什么 我们带着这些问题，去认识、学习google-guava","tags":[{"name":"Framework","slug":"Framework","permalink":"//star45.me/tags/Framework/"},{"name":"Guava","slug":"Guava","permalink":"//star45.me/tags/Guava/"}]}]